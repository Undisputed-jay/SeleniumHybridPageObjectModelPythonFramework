{"name": "test_register_with_valid_credentials", "status": "failed", "statusDetails": {"message": "AssertionError: assert False\n +  where False = <method-wrapper '__eq__' of str object at 0x00000254D1E3EBF0>('Your Account Has Been Created!')\n +    where <method-wrapper '__eq__' of str object at 0x00000254D1E3EBF0> = 'Register Account'.__eq__\n +      where 'Register Account' = <bound method AccountSuccess.account_success_message of <pageobject.AccountSuccess.AccountSuccess object at 0x00000254D1E14850>>()\n +        where <bound method AccountSuccess.account_success_message of <pageobject.AccountSuccess.AccountSuccess object at 0x00000254D1E14850>> = <pageobject.AccountSuccess.AccountSuccess object at 0x00000254D1E14850>.account_success_message", "trace": "self = <test_register.TestRegister object at 0x00000254D1BEC850>\n\n    def test_register_with_valid_credentials(self):\n        home_page = HomePage(self.driver)\n        # self.driver.find_element(By.XPATH, \"//span[text()='My Account']\").click()\n        # home_page.click_on_myaccount_dropdown()\n        # self.driver.find_element(By.LINK_TEXT, \"Register\").click()\n        # register_page = home_page.select_register_option() #return RegisterPage in the HomePage (pageobject)\n        # register_page = RegisterPage(self.driver)\n        # self.driver.find_element(By.ID, \"input-firstname\").send_keys(\"muniru\")\n        register_page = home_page.myaccount_dropdown_n_select_register_option()\n        register_page.input_all_values(\"mufu\", \"ambali\", \"mufuambali@gmail.com\", \"12345678\", \"12345\", \"12345\")\n        # register_page.input_first_name(\"muniru\")\n        # self.driver.find_element(By.ID, \"input-lastname\").send_keys(\"ambali\")\n        # register_page.input_last_name(\"ambali\")\n        # self.driver.find_element(By.ID, \"input-email\").send_keys(\"munirambali@gmailcom\")\n        # register_page.input_email(\"muniruambali@gmailcom\")\n        # self.driver.find_element(By.ID, \"input-telephone\").send_keys(\"12345678\")\n        # register_page.input_telephone(\"12345678\")\n        # self.driver.find_element(By.ID, \"input-password\").send_keys(\"12345\")\n        # register_page.input_password(\"12345\")\n        # self.driver.find_element(By.ID, \"input-confirm\").send_keys(\"12345\")\n        # register_page.confirm_password(\"12345\")\n        # self.driver.find_element(By.XPATH, \"//input[@name='newsletter'][@value='1']\").click()\n        register_page.agree_to_newsletter()\n        # self.driver.find_element(By.NAME, \"agree\").click()\n        register_page.radio_agree_terms()\n        # self.driver.find_element(By.XPATH, \"//input[@value='Continue']\").click()\n        account_success = register_page.continue_button() #return AccountSuccess in the RegisterPage(pageobject)\n        # account_success = AccountSuccess(self.driver)\n        expected_message = \"Your Account Has Been Created!\"\n        # assert self.driver.find_element(By.XPATH, \"//div[@id='content']/h1\").text.__eq__(expected_message)\n>       assert account_success.account_success_message().__eq__(expected_message)\nE       AssertionError: assert False\nE        +  where False = <method-wrapper '__eq__' of str object at 0x00000254D1E3EBF0>('Your Account Has Been Created!')\nE        +    where <method-wrapper '__eq__' of str object at 0x00000254D1E3EBF0> = 'Register Account'.__eq__\nE        +      where 'Register Account' = <bound method AccountSuccess.account_success_message of <pageobject.AccountSuccess.AccountSuccess object at 0x00000254D1E14850>>()\nE        +        where <bound method AccountSuccess.account_success_message of <pageobject.AccountSuccess.AccountSuccess object at 0x00000254D1E14850>> = <pageobject.AccountSuccess.AccountSuccess object at 0x00000254D1E14850>.account_success_message\n\ntest_register.py:80: AssertionError"}, "start": 1693478818699, "stop": 1693478821639, "uuid": "95bd7f36-9f6c-4b3f-9ecc-7e5a91d9ed9a", "historyId": "30fd62601bf8b3ff40d0ae260ac1a967", "testCaseId": "30fd62601bf8b3ff40d0ae260ac1a967", "fullName": "test_register.TestRegister#test_register_with_valid_credentials", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('setup_and_teardown')"}, {"name": "suite", "value": "test_register"}, {"name": "subSuite", "value": "TestRegister"}, {"name": "host", "value": "DESKTOP-UH7HVDH"}, {"name": "thread", "value": "2824-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_register"}]}